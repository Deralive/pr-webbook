data = data.frame(
X1 = c(1,1,1,1,1,1,1
2,2,2,2,2,2,2,
## B part
data = data.frame(
X1 = c(1,1,1,1,1,1,1,
2,2,2,2,2,2,2,
3,3,3,3,3,3),
X2 = c(1,2,3,1,2,3,1,2,3,
1,2,3,1,2,3,1,2,3,
1,2),
Y = c(-1,-1,-1,-1,-1,
1,1,1,1,1,
-1,1,-1,1,1
1,-1,1,1,1)
## B part
data = data.frame(
X1 = c(1,1,1,1,1,1,1,
2,2,2,2,2,2,2,
3,3,3,3,3,3),
X2 = c(1,2,3,1,2,3,1,2,3,
1,2,3,1,2,3,1,2,3,
1,2),
Y = c(-1,-1,-1,-1,-1,
1,1,1,1,1,
-1,1,-1,1,1,
1,-1,1,1,1)
)
View(data)
library(e1071)
naiveBayes(Y~X1+X2,data)
mod = naiveBayes(Y~X1+X2,data)
predict(mod,c(3,2))
predict(mod,data.frame(X1=3,X2=2))
View(data)
## B part
data = data.frame(
X1 = c(1,1,1,
1,1,1,
1,2,2,
2,2,2,
2,2,3,
3,3,3,
3,3),
X2 = c(1,2,3,
1,2,3,
1,2,3,
1,2,3,
1,2,3,
1,2,3,
1,2),
Y = c(-1,-1,1,
-1,-1,1,
1,1,1,
1,-1,1,
-1,1,1,
1,-1,1,
1,1)
)
mod = naiveBayes(Y~X1+X2,data)
summary(mod)
mod
## B part
data = data.frame(
X1 = c(1,1,1,
1,1,1,
1,2,2,
2,2,2,
2,2,3,
3,3,3,
3,3),
X2 = c(1,2,3,
1,2,3,
1,2,3,
1,2,3,
1,2,3,
1,2,3,
1,2),
Y = c(-1,-1,1,
-1,-1,1,
1,1,1,
-1,-1,1,
-1,1,1,
1,-1,1,
1,1)
)
library(e1071)
mod = naiveBayes(Y~X1+X2,data)
mod
## B part
data = data.frame(
X1 = c(1,1,1,
1,1,1,
1,2,2,
2,2,2,
2,2,3,
3,3,3,
3,3),
X2 = c(1,2,3,
1,2,3,
1,2,3,
1,2,3,
1,2,3,
1,2,3,
1,2),
Y = c(-1,-1,1,
-1,-1,1,
-1,-1,1,
-1,-1,1,
-1,1,1,
1,-1,1,
1,1)
)
library(e1071)
mod = naiveBayes(Y~X1+X2,data)
predict(mod,data.frame(X1=3,X2=2))
mod
## B part
data = data.frame(
X1 = c(1,1,1,
1,1,1,
1,2,2,
2,2,2,
2,2,3,
3,3,3,
3,3),
X2 = c(1,2,3,
1,2,3,
1,2,3,
1,2,3,
1,2,3,
1,2,3,
1,2),
Y = c(-1,-1,1,
-1,-1,1,
1,-1,-1,
-1,-1,1,
-1,1,1,
1,-1,1,
1,1)
)
library(e1071)
mod = naiveBayes(Y~X1+X2,data)
predict(mod,data.frame(X1=3,X2=2))
mod
data[which(Y==1)]
data[which(Y==1),]
data[which(data$Y==1),]
data[which(data$Y==-1),]
table(data[which(data$Y==-1),1])
table(data[which(data$Y==-1),2])
table(data[which(data$Y==-1),])
table(data[which(data$Y==1),1])
table(data[which(data$Y==1),2])
## B part
data = data.frame(
X1 = c(1,1,1,
1,1,1,
1,2,2,
2,2,2,
2,2,3,
3,3,3,
3,3),
X2 = c(1,2,3,
1,2,3,
1,2,3,
1,2,3,
1,2,3,
1,2,3,
1,2),
Y = c(-1,-1,1,
-1,1,-1,
1,-1,-1,
-1,-1,1,
-1,1,1,
1,-1,1,
1,1)
)
library(e1071)
mod = naiveBayes(Y~X1+X2,data)
table(data[which(data$Y==1),1])
table(data[which(data$Y==1),2])
table(data[which(data$Y==-1),1])
table(data[which(data$Y==-1),2])
predict(mod,data.frame(X1=3,X2=2))
predict(mod,data.frame(X1=2,X2=2))
predict(mod,data.frame(X1=2,X2=3))
predict(mod,data.frame(X1=1,X2=3))
predict(mod,data.frame(X1=1,X2=2))
predict(mod,data.frame(X1=2,X2=1))
## B part
data = data.frame(
X1 = c(1,1,3,
1,1,2,
1,2,2,
2,2,2,
2,2,3,
3,3,3,
3,3),
X2 = c(1,2,3,
1,2,3,
1,2,3,
1,2,3,
1,2,3,
1,2,3,
1,2),
Y = c(-1,-1,1,
-1,1,-1,
1,-1,-1,
-1,-1,1,
-1,1,1,
1,-1,1,
1,1)
)
library(e1071)
mod = naiveBayes(Y~X1+X2,data)
predict(mod,data.frame(X1=3,X2=1))
table(data[which(data$Y==-1),1])
table(data[which(data$Y==-1),])
table(data[which(data$Y==1),])
table(data[which(data$Y==1),1])
table(data[which(data$Y==1),2])
table(data[which(data$Y==-1),1])
table(data[which(data$Y==-1),2])
mod
data
data[sort(data$X1),]
## B part
data = data.frame(
X1 = c(1,1,3,
1,1,2,
1,2,2,
2,2,2,
2,2,3,
3,3,3,
3,3),
X2 = c(1,2,3,
1,2,3,
1,2,3,
1,2,3,
1,2,3,
1,2,3,
1,2),
Y = c(-1,-1,1,
-1,-1,1,
1,-1,-1,
-1,-1,1,
-1,1,1,
1,-1,1,
1,1)
)
library(e1071)
mod = naiveBayes(Y~X1+X2,data)
predict(mod,data.frame(X1=3,X2=1))
## B part
data = data.frame(
X1 = c(1,1,3,
1,1,2,
1,2,2,
2,2,2,
2,2,3,
3,3,3,
3,3),
X2 = c(1,2,3,
1,2,3,
1,2,3,
1,2,3,
1,2,3,
1,2,3,
1,2),
Y = c(-1,-1,1,
-1,-1,1,
-1,-1,1,
-1,-1,1,
-1,1,1,
1,-1,1,
1,1)
)
library(e1071)
mod = naiveBayes(Y~X1+X2,data)
predict(mod,data.frame(X1=3,X2=1))
mod
data[which(data$Y==1),]
data[which(data$Y==-1),]
data[which(data$Y==-1),]
data[which(data$Y==1),]
predict(mod,data.frame(X1=1,X2=3))
data[which(data$Y==-1),]
## B part
data = data.frame(
X1 = c(1,1,3,
1,1,2,
1,2,2,
2,2,2,
2,2,3,
3,3,3,
3,3),
X2 = c(1,2,3,
1,2,3,
1,2,3,
1,2,3,
1,2,3,
1,2,3,
1,2),
Y = c(-1,-1,1,
-1,1,-1,
-1,-1,1,
-1,-1,1,
-1,1,1,
1,-1,1,
1,1)
)
data[which(data$Y==-1),]
data[which(data$Y==1),]
data[which(data$Y==-1),]
table(data[which(data$Y==1),])
table(data[which(data$Y==-1),])
take_a_ball = function(p){
ball = sample(c(-1,1),1,prob=c(1-p,p))
return(ball)
}
continue_or_discard = function(q){
cd = rbinom(1,1,prob=q)
return(cd)
}
family_result = function(max_num_ball,p0,p1,p2){
ball_result = rep(0,max_num_ball)
current_index = 1
while (current_index <= max_num_ball){
if (current_index > 1){
last_ball = ball_result[current_index-1]
if (last_ball == 1){
ball_result[current_index] = continue_or_discard(1-p1)*take_a_ball(p0)
}else if (last_ball == -1){
ball_result[current_index] = continue_or_discard(1-p2)*take_a_ball(p0)
}else break
}else{
ball_result[current_index] = take_a_ball(p0)
}
current_index = current_index + 1
}
return(ball_result)
}
max_num_ball = 2
p0 = 0.5
p1 = 0.8
p2 = 0.2
total_num = 10^(6)
result_mat = matrix(nrow= total_num,ncol=max_num_ball)
for (i in 1:total_num){
result_mat[i,] = family_result(max_num_ball,p0,p1,p2)
}
total_num_ball = sum(result_mat != 0)
num_ball_1 = sum(result_mat == 1)
num_ball_1/total_num_ball
max_num_ball = 2
p1 = 0.8
p2 = 0.2
simulation = function(max_num_ball,p1,p2){
total_num = 10^(5)
p0 = 0.5
result_mat = matrix(nrow= total_num,ncol=max_num_ball)
for (i in 1:total_num){
result_mat[i,] = family_result(max_num_ball,p0,p1,p2)
}
total_num_ball = sum(result_mat != 0)
num_ball_1 = sum(result_mat == 1)
num_ball_1/total_num_ball
}
simulation(2,0.8,0.2)
simulation(2,0.8,0.3)
simulation(2,0.8,0.4)
simulation(2,0.8,0.5)
simulation(2,0.8,0.6)
simulation(2,0.8,0.7)
simulation(2,1,0)
simulation(2,0.8,0.2)
simulation(2,0.5,0.5)
simulation(2,0.2,0.8)
simulation(2,0,1)
simulation(3,1,0)
simulation(3,0.8,0.2)
simulation(3,0.5,0.5)
simulation(3,0.2,0.8)
simulation(3,0,1)
simulation(5,1,0)
simulation(5,0.8,0.2)
simulation(5,0.5,0.5)
simulation(5,0.2,0.8)
simulation(5,0,1)
simulation(10,1,0)
simulation(10,0.8,0.2)
simulation(10,0.5,0.5)
simulation(10,0.2,0.8)
simulation(10,0,1)
simulation(100,1,0)
simulation(100,0.8,0.2)
simulation(100,0.5,0.5)
simulation(100,0.2,0.8)
simulation(100,0,1)
distAB = function(A,B,type=c(1,2,3)){
C = A - B
if (type == 1){
output = sum(abs(C))
}else if (type == 2){
output = sqrt(sum(C^2))
}else if (type == 3){
output = max(abs(C))
}
return(output)
}
B = c(4,5)
A = array(dim = c(7,2,1))
A[1,,] = c(0,5)
A[2,,] = c(1,3)
A[3,,] = c(5,1)
A[4,,] = c(7,4)
A[5,,] = c(6,7)
A[6,,] = c(4,10)
A[7,,] = c(1,9)
Result = matrix(nrow = 7,ncol=3)
for (i in 1:7){
for (j in 1:3){
Result[i,j] = distAB(B,A[i,,],j)
}
}
Result
setwd("/Users/lyuni/ECNU_DaSE/Courses/Eductional Paper/Prob&Stat/2023级")
data = read.csv("2023级学生成绩（线代、高数&概统）.csv",header=TRUE)
head(data)
View(data)
colnames(data) = c("ID","Stu_ID","Name","Prob_Stat","Lin_Alge","Calculus")
View(data)
cor(data$Prob_Stat,data$Lin_Alge)
cor(data$Prob_Stat,data$Calculus)
cor(data$Prob_Stat,data$Calculus)
View(data)
data$Calculus
setwd("/Users/lyuni/ECNU_DaSE/Courses/Eductional Paper/Prob&Stat/2023级")
data = read.csv("2023级学生成绩（线代、高数&概统）.csv",header=TRUE)
head(data)
colnames(data) = c("ID","Stu_ID","Name","Prob_Stat","Lin_Alge","Calculus")
cor(data$Prob_Stat,data$Lin_Alge)
cor(data$Prob_Stat,data$Calculus)
plot(Prob_Stat~Lin_Alge,data)
plot(Prob_Stat~Calculus,data)
plot(Prob_Stat~Lin_Alge,data,col=rgb(0.2,0.2,0.6,alpha=0.5))
plot(Prob_Stat~Lin_Alge,data,col=rgb(0.2,0.2,0.6,alpha=0.5),pch=16)
plot(Prob_Stat~Lin_Alge,data,col=rgb(0.2,0.2,0.6,alpha=0.5),pch=16,xlab="Linear Algebra",ylab="Probability and Statistics",xlim=c(40,100),ylim=c(40,100))
plot(Prob_Stat~Calculus,data,col=rgb(0.2,0.2,0.6,alpha=0.5),pch=16,xlab="Calculus",ylab="Probability and Statistics",xlim=c(40,100),ylim=c(40,100))
par(mfrow=c(2,1))
plot(Prob_Stat~Lin_Alge,data,col=rgb(0.2,0.2,0.6,alpha=0.5),pch=16,xlab="Linear Algebra",ylab="Probability and Statistics",xlim=c(50,100),ylim=c(40,100))
par(mfrow=c(1,2))
plot(Prob_Stat~Lin_Alge,data,col=rgb(0.2,0.2,0.6,alpha=0.5),pch=16,xlab="Linear Algebra",ylab="Probability and Statistics",xlim=c(50,100),ylim=c(40,100))
plot(Prob_Stat~Calculus,data,col=rgb(0.2,0.2,0.6,alpha=0.5),pch=16,xlab="Calculus",ylab="Probability and Statistics",xlim=c(50,100),ylim=c(40,100))
par(mfrow=c(1,2))
plot(Prob_Stat~Lin_Alge,data,col=rgb(0.2,0.2,0.6,alpha=0.5),pch=16,xlab="Linear Algebra",ylab="Probability and Statistics",xlim=c(40,100),ylim=c(40,100))
plot(Prob_Stat~Calculus,data,col=rgb(0.2,0.2,0.6,alpha=0.5),pch=16,xlab="Calculus",ylab="Probability and Statistics",xlim=c(40,100),ylim=c(40,100))
intersect(which(data$Prob_Stat<60),which(data$Calculus>80))
data[index,]
index=intersect(which(data$Prob_Stat<60),which(data$Calculus>80))
data[index,]
mod = lm(Prob_Stat~Calculus+Lin_Alge,data)
summary(mod)
mod = lm(Prob_Stat~Calculus,data)
summary(mod)
cor(data$Prob_Stat,data$Calculus)
cor(data$Prob_Stat,data$Lin_Alge)
setwd("/Users/lyuni/ECNU_DaSE/Courses/Probs_Stat/Notes/version3.0/v3/fig")
setwd("/Users/lyuni/ECNU_DaSE/Courses/Probs_Stat/Notes/version3.0/v3/fig")
pdf("chap08_score_in_Probability_Statistics.pdf",height=6,width=12)
par(mfrow=c(1,2))
plot(Prob_Stat~Lin_Alge,data,col=rgb(0.2,0.2,0.6,alpha=0.5),pch=16,xlab="Linear Algebra",ylab="Probability and Statistics",xlim=c(40,100),ylim=c(40,100))
plot(Prob_Stat~Calculus,data,col=rgb(0.2,0.2,0.6,alpha=0.5),pch=16,xlab="Calculus",ylab="Probability and Statistics",xlim=c(40,100),ylim=c(40,100))
dev.off()
pdf("Chap08_score_in_Probability_Statistics.pdf",height=6,width=12)
par(mfrow=c(1,2))
plot(Prob_Stat~Lin_Alge,data,col=rgb(0.2,0.2,0.6,alpha=0.5),pch=16,xlab="Linear Algebra",ylab="Probability and Statistics",xlim=c(40,100),ylim=c(40,100))
plot(Prob_Stat~Calculus,data,col=rgb(0.2,0.2,0.6,alpha=0.5),pch=16,xlab="Calculus",ylab="Probability and Statistics",xlim=c(40,100),ylim=c(40,100))
dev.off()
cor(data$Prob_Stat,data$Lin_Alge)
cor(data$Prob_Stat,data$Calculus)
text(70,90,paste("Correlation = ",round(cor(data$Prob_Stat,data$Lin_Alge),2)))
setwd("/Users/lyuni/ECNU_DaSE/Courses/Probs_Stat/Notes/version3.0/v3/fig")
pdf("Chap08_score_in_Probability_Statistics.pdf",height=6,width=12)
par(mfrow=c(1,2))
plot(Prob_Stat~Lin_Alge,data,col=rgb(0.2,0.2,0.6,alpha=0.5),pch=16,xlab="Linear Algebra",ylab="Probability and Statistics",xlim=c(40,100),ylim=c(40,100))
text(70,90,paste("Correlation = ",round(cor(data$Prob_Stat,data$Lin_Alge),2)))
plot(Prob_Stat~Calculus,data,col=rgb(0.2,0.2,0.6,alpha=0.5),pch=16,xlab="Calculus",ylab="Probability and Statistics",xlim=c(40,100),ylim=c(40,100))
text(70,90,paste("Correlation = ",round(cor(data$Prob_Stat,data$Calculus),2)))
dev.off()
pdf("Chap8_score_in_Probability_Statistics.pdf",height=6,width=12)
par(mfrow=c(1,2))
plot(Prob_Stat~Lin_Alge,data,col=rgb(0.2,0.2,0.6,alpha=0.5),pch=16,xlab="Linear Algebra",ylab="Probability and Statistics",xlim=c(40,100),ylim=c(40,100))
text(70,90,paste("Correlation = ",round(cor(data$Prob_Stat,data$Lin_Alge),2)))
plot(Prob_Stat~Calculus,data,col=rgb(0.2,0.2,0.6,alpha=0.5),pch=16,xlab="Calculus",ylab="Probability and Statistics",xlim=c(40,100),ylim=c(40,100))
text(70,90,paste("Correlation = ",round(cor(data$Prob_Stat,data$Calculus),2)))
dev.off()
pdf("Chap8_score_in_Probability_Statistics.pdf",height=6,width=12)
par(mfrow=c(1,2))
plot(Prob_Stat~Lin_Alge,data,col=rgb(0.2,0.2,0.6,alpha=0.5),pch=16,xlab="Linear Algebra",ylab="Probability and Statistics",xlim=c(40,100),ylim=c(40,100))
text(70,95,paste("Correlation = ",round(cor(data$Prob_Stat,data$Lin_Alge),2)))
plot(Prob_Stat~Calculus,data,col=rgb(0.2,0.2,0.6,alpha=0.5),pch=16,xlab="Calculus",ylab="Probability and Statistics",xlim=c(40,100),ylim=c(40,100))
text(70,95,paste("Correlation = ",round(cor(data$Prob_Stat,data$Calculus),2)))
dev.off()
par(mfrow=c(1,2))
plot(Prob_Stat~Lin_Alge,data,col=rgb(0.2,0.2,0.6,alpha=0.5),pch=16,xlab="Linear Algebra",ylab="Probability and Statistics",xlim=c(40,100),ylim=c(40,100))
text(70,95,paste("Correlation = ",round(cor(data$Prob_Stat,data$Lin_Alge),2)))
plot(Prob_Stat~Calculus,data,col=rgb(0.2,0.2,0.6,alpha=0.5),pch=16,xlab="Calculus",ylab="Probability and Statistics",xlim=c(40,100),ylim=c(40,100))
text(70,95,paste("Correlation = ",round(cor(data$Prob_Stat,data$Calculus),2)))
index=intersect(which(data$Prob_Stat<60),which(data$Calculus>80))
data[index,]
